from typing import Any, Dict, List, Optional, Protocol
from chromadb.api.models.Collection import Collection

class VectorDbInterface(Protocol):
    """Vector DB contract."""
    def get_or_create(self, name: str) -> Collection: ...
    def add(self, collection: str, ids: List[str], documents: List[str],
            embeddings: List[List[float]], metadatas: List[Dict[str, Any]]) -> None: ...
    def query_by_embedding(self, collection: str, query_embedding: List[float], n_results: int,
                           where: Optional[Dict[str, Any]] = None) -> Dict[str, Any]: ...
    def query_by_text(self, collection: str, query_text: str, n_results: int,
                      where: Optional[Dict[str, Any]] = None) -> Dict[str, Any]: ...
